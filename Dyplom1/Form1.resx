<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Jv9fRCb/X0Qm/19EJv9fRCb/X0Qm/15AG/9Id4P+YEsz/6yglv9MaGv/TJatpkqivtxgSzP/rKCW/0Zq
        cf9gSzP/XkAb/2E+E/9eOAb/XjgG/144Bv9eOAb/XjgG/6i30P3Z7vb/2e72/9nu9v/Z7vb/2e72/9nu
        9v/A3en/aUgl/2E+E/9eQBv/XkAb/15AG/9fRCb/X0Qm/11LNPpHcXr/pJaK/19EJv9Kor7cRpqz+3FX
        PP+soJb/R3F6/2E+E/9ZdXz/MajJ/zGoyf8xqMn/MajJ/zGoyf8xqMn/p8/f+6i30P3L5PD/y+Tw/+f3
        /P/n9/z/5/f8/8Dd6f9JkKX/P4mf/0N/kP5Id4P+TG1z/144Bv9fRCb/XkAb/0J5h/qklor/aUgl/0aa
        s/s6k63+bFA0/4BrV/9HcXr/XkAb/1pBIf+L0+r/p8/f+6fP3/uy2uj/wN3p/8Dd6f+nz9/72e72/5Gp
        w/+ot9D92e72/9nu9v/n9/z/wN3p/2bB3P8xqMn/ZsHc/4vT6v+L0+r/W4mV/15AG/9eQBv/QnmH+o58
        a/5xVzz/OpOt/jqTrf5pSCX/lYR1/0dxev9eQBv/YT4T/1uJlf/A3en/7fv+/+f3/P/n9/z/7fv+/8HW
        5frZ7vb/5/f8/8HW5fqRqcP/qLfQ/dnu9v/A3en/7fv+/9nu9v/B1uX6wN3p/8Dd6f9ZdXz/YT4T/15A
        G/9CeYf6lYR1/3FXPP86k63+Rpqz+2xQNP+gkYT/R3F6/15AG/9fRCb/WkEh/2bB3P/t+/7/5/f8/+f3
        /P/n9/z/wdbl+uf3/P/n9/z/5/f8/+f3/P/t+/7/wdbl+sDd6f/t+/7/5/f8/+37/v+y2uj/7fv+/8vk
        8P9QSz3/YT4T/0J5h/qai37/aUgl/zqTrf5Kor7cWkEh/6yglv9GanH/YEsz/19EJv9hPhP/W4mV/7La
        6P/n9/z/5/f8/+37/v+nz9/7wN3p/8Dd6f/A3en/wN3p/8Dd6f/A3en/p8/f++37/v/n9/z/5/f8/+f3
        /P/L5PD/p8/f+144Bv9dSzT6R3F6/6yglv9aQSH/NJy72UyWraZMaGv/mot+/1pBIf9HcXr/XkAb/19E
        Jv9aQSH/ZsHc/+37/v/n9/z/5/f8/+f3/P/n9/z/5/f8/+37/v+nz9/77fv+/+f3/P/n9/z/5/f8/+f3
        /P/n9/z/5/f8/8Dd6f+RqcP/XjgG/0h3g/5gSzP/pJaK/0xoa/9Mlq2mTLreX0xoa/+OfGv+iHVj/0h3
        g/5hPhP/X0Qm/2E+E/9biZX/wN3p/+f3/P/n9/z/5/f8/+f3/P/t+/7/5/f8/8vk8P/t+/7/5/f8/+f3
        /P/n9/z/5/f8/+f3/P/n9/z/7fv+/0dxev9eOAb/Q3+Q/oBrV/9sUDT/R3F6/0y63l/O//8FOpOt/l44
        Bv+OfGv+S2Jj/1hUR/5fRCb/X0Qm/15AG/9mwdz/7fv+/+f3/P/n9/z/5/f8/7La6P/Z7vb/i9Pq/7La
        6P/t+/7/5/f8/+f3/P/n9/z/5/f8/+f3/P/Z7vb/UEs9/1hUR/5GanH/iHVj/2E+E/86k63+zv//BUxw
        RwBOm7O5S2Jj/6CRhP9xVzz/Q3+Q/mE+E/9fRCb/XkAb/1l1fP/A3en/7fv+/+37/v/t+/7/2e72/wCV
        sv86vNb/MajJ/zqTrf7t+/7/7fv+/8vk8P/L5PD/7fv+/7La6P9eOAb/P4mf/3liS/6VhHX/TGhr/06b
        s7lMcEcATHBHAIL5/x4/iZ//YT4T/7mwqP9QSz3/R3F6/2E+E/9fRCb/XjgG/1l1fP+RqcP/TGhr/0mQ
        pf9mwdz/ZsHc/2bB3P9mwdz/OrzW/zGoyf9NWVT/WkEh/144Bv9QSz3/S2Jj/0h3g/5QSz3/mot+/2lI
        Jf8/iZ//ANr/HUxwRwBMcEcATHBHAFWnwqdGanH/gGtX/6SWiv9NWVT/TGhr/2E+E/9fRCb/XkAb/144
        Bv9eQBv/WkEh/0h3g/4xqMn/OrzW/zq81v9GmrP7TGhr/2E+E/9fRCb/X0Qm/2E+E/9MaGv/S2Jj/5qL
        fv+Aa1f/R3F6/0yWraZMcEcATHBHAExwRwBMcEcATHBHAEaas/tNWVT/oJGE/4BrV/9NWVT/TG1z/2E+
        E/9fRCb/X0Qm/19EJv9fRCb/XkAb/144Bv9NWVT/YEsz/2E+E/9eQBv/X0Qm/19EJv9hPhP/R3F6/0ti
        Y/+OfGv+gGtX/01ZVP86k63+THBHAExwRwBMcEcATHBHAExwRwBMcEcAgvn/HkmQpf9QSz3/mot+/5WE
        df9QSz3/SHeD/lhUR/5eQBv/XkAb/19EJv9fRCb/X0Qm/19EJv9fRCb/X0Qm/15AG/9eQBv/WFRH/kN/
        kP5QSz3/oJGE/5WEdf9YVEf+P4mf/wDa/x1McEcATHBHAExwRwBMcEcATHBHAExwRwBMcEcAX93+KkmQ
        pf9NWVT/cVc8/6yglv95Ykv+S2Jj/0dxev9MbXP/X0Qm/15AG/9eQBv/XkAb/15AG/9fRCb/TG1z/0dx
        ev9LYmP/bFA0/5qLfv+Aa1f/TVlU/z+Jn/9f3f4qTHBHAExwRwBMcEcATHBHAExwRwBMcEcATHBHAExw
        RwBMcEcAgvn/Hkaas/tHcXr/YT4T/4h1Y/+soJb/eWJL/mBLM/9GanH/Rmpx/0xtc/9MbXP/TG1z/0Zq
        cf9gSzP/iHVj/5qLfv95Ykv+aUgl/0dxev86k63+ANr/HUxwRwBMcEcATHBHAExwRwBMcEcATHBHAExw
        RwBMcEcATHBHAExwRwBMcEcATHBHAFWnwqc/iZ//TGhr/2E+E/+IdWP/oJGE/6CRhP+gkYT/gGtX/5WE
        df+IdWP/rKCW/5qLfv+OfGv+bFA0/0xoa/8/iZ//TJatpkxwRwBMcEcATHBHAExwRwBMcEcATHBHAExw
        RwBMcEcATHBHAExwRwBMcEcATHBHAExwRwBMcEcATHBHAIL5/x5Om7O5OpOt/kxtc/9MaGv/X0Qm/2xQ
        NP9xVzz/bFA0/2xQNP9fRCb/TGhr/0xtc/86k63+TpuzuQDa/x1McEcATHBHAExwRwBMcEcATHBHAExw
        RwBMcEcATHBHAExwRwBMcEcATHBHAExwRwBMcEcATHBHAExwRwBMcEcATHBHAExwRwDO//8FTLreX0yW
        raZKor7cRpqz+zqTrf46k63+OpOt/jScu9lMlq2mTLreX0xwRwBMcEcATHBHAExwRwBMcEcATHBHAExw
        RwBMcEcATHBHAExwRwBMcEcA/8AD//8AAP/+AAB/+AAAH/AAAA/gAAAH4AAAB8AAAAOAAAABgAAAAYAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAABwAAAA+AA
        AAfgAAAH8AAAD/gAAB/+AAB//wAA///AB/8=
</value>
  </data>
</root>